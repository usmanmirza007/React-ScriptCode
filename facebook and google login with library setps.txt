
##################################### login facebook with library #############################

1 Install facebook libaray npm i react-native-fbsdk
2 Add build.gradle > repositories > mavenCentral()
3 Add line in build.gradle > implementation 'com.facebook.android:facebook-android-sdk:[5,6)' 
4 Add line androidManifest > application > <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/facebook_app_id"/>
5 Add permission line androidManifest > <uses-permission android:name="android.permission.INTERNET" />
6 Add line in string.xml > resources > <string name="facebook_app_id">enter facebook_id</string>
7 Generate HASH key open your ptoject > android > app > run this command keytool -exportcert -alias androiddebugkey -keystore debug.keystore
8 Create app with developers.facebook.com 
9 Add platform android app and enter package name and enter hask key.
10 setup quick start enter package name activityname and press next enter hask key and finished
11  const facebookLogin = async () => {
    try {
      const result = await LoginManager.logInWithPermissions([
        'public_profile',
        'email',
      ]);
      if (result.isCancelled) {
        throw 'User cancelled the login process';
      }
      console.log('result', result);
      // return
      // Once signed in, get the users AccesToken
      const data = await AccessToken.getCurrentAccessToken();


      console.log('data', data);
      dispatch(Actions.loginGoogle(data?.accessToken))

    } catch (e) {
      console.log('Error' + e);
    }
  };
################################### login google with libaray #################################

1 npm i @react-native-google-signin/google-signin
2 GoogleSignin.configure({
    // scopes: ['https://www.googleapis.com/auth/drive.readonly'], // what API you want to access on behalf of the user, default is email and profile
    // webClientId: '931520114343-8dvqrql40bvmbi7rb6pl5i1p1gs5bgv8.apps.googleusercontent.com', // client ID of type WEB for your server (needed to verify user ID and offline access)
    webClientId: '931520114343-ugh26ivit2g075boecnhgc1iceg8lo7j.apps.googleusercontent.com', // client ID of type WEB for your server (needed to verify user ID and offline access)
    offlineAccess: true, // if you want to access Google API on behalf of the user FROM YOUR SERVER
    // hostedDomain: '', // specifies a hosted domain restriction
    // loginHint: '', // [iOS] The user's ID, or email address, to be prefilled in the authentication UI if possible. [See docs here](https://developers.google.com/identity/sign-in/ios/api/interface_g_i_d_sign_in.html#a0a68c7504c31ab0b728432565f6e33fd)
    // forceCodeForRefreshToken: true, // [Android] related to `serverAuthCode`, read the docs link below *.
    // accountName: '', // [Android] specifies an account name on the device that should be used
    // iosClientId: '<FROM DEVELOPER CONSOLE>', // [iOS] optional, if you want to specify the client ID of type iOS (otherwise, it is taken from GoogleService-Info.plist)
    // googleServicePlistPath: '', // [iOS] optional, if you renamed your GoogleService-Info file, new name here, e.g. GoogleService-Info-Staging
  });
3 Add line build.gradle buildscript > ext > googlePlayServicesAuthVersion = '17.0.0'
4 Add line androidManifest > <uses-permission android:name="android.permission.INTERNET" />
5 Open console.cloud.google.com 
6 Create project 
7 Create Credentails with oAuth client id 
8 Select web Application
9 Generate client id