 // ######################### image picker ###################################

  getPermissionAsync = async () => {
    if (Constants.platform.ios) {
      const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);
      if (status !== 'granted') {
        alert('Sorry, we need camera roll permissions to make this work!');
      }
    }
  };

  _pickImage = async () => {
    try {
      let result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.All,
        allowsEditing: true,
        aspect: [4, 3],
        quality: 1,
      });
      if (!result.cancelled) {
        this.setState({ image: result.uri });
      }

      console.log(result);
    } catch (E) {
      console.log(E);
    }
  };

##################view#################
<View style={{ flex: 1, marginLeft: 25, marginBottom: 25, marginTop: 15 }}>
              <TouchableOpacity onPress={this._pickImage} >
                <Text style={{ color: '#000', fontWeight: 'bold', fontSize: 18, alignSelf: 'flex-start' }}>Select Image</Text>
              </TouchableOpacity>
              {image && <Image source={{ uri: image.uri }} style={{ width: 200, height: 200 }} />}
            </View>