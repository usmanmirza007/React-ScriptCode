
import { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';

 <GooglePlacesAutocomplete
                    placeholder="Where are you going"
                    minLength={2} // minimum length of text to search
                    autoFocus={false}
                    returnKeyType={'search'} // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype
                    listViewDisplayed="auto" // true/false/undefined
                    fetchDetails={true}
                    renderDescription={row => row.description} // custom description render
                    onPress={(data, details = null) => {
                        // this.props.notifyChange(details.geometry.location)
                        console.log("data", data);
                        console.log("detail", details.geometry.location.lat, details.geometry.location.lng);
                        const lat = details.geometry.location.lat
                        const log = details.geometry.location.lng
                        this.setState({
                            latitude: lat,
                            longitude: log
                        }, () => {this.props.loc(lat, log)})
                    }}

                    getDefaultValue={() => {
                        return ''; // text input default value
                    }}
                    query={{
                        // available options: https://developers.google.com/places/web-service/autocomplete
                        key: 'AIzaSyBDBC7S15dcIn37D1LmDpsJMAojajYZJ6s',
                        language: 'en', // language of the results
                        types: 'establishment', // default: 'geocode'
                        // location: '30.36214, 78.26541',
                        radius: '20'
                    }}
                    styles={{

                        description: {
                            fontWeight: 'bold',
                        },
                        listView: { backgroundColor: '#fff', marginTop: hp('5%') },
                        container: { flex: 0, position: 'absolute', width: '100%', zIndex: 1, },
                        textInput: {
                            fontWeight: '700',
                            fontSize: 18,
                            marginTop: wp('5%'),
                            borderRadius: 20,
                            width: wp('90%'),
                            marginHorizontal: wp('5%'),
                            backgroundColor: '#fff',
                            height: hp('10%')

                        },
                        predefinedPlacesDescription: {
                            color: '#1faadb',
                        },
                    }}
                    currentLocation={true}
                    currentLocationLabel="Current location"
                    nearbyPlacesAPI="GooglePlacesSearch" // Which API to use: GoogleReverseGeocoding or GooglePlacesSearch
                    GoogleReverseGeocodingQuery={{
                        // available options for GoogleReverseGeocoding API : https://developers.google.com/maps/documentation/geocoding/intro
                    }}
                    GooglePlacesSearchQuery={{
                        // available options for GooglePlacesSearch API : https://developers.google.com/places/web-service/search
                        rankby: 'distance',
                        types: ['food', 'gym', 'city_hall', 'car_wash', 'airport', 'car_rental', 'car_dealer'],
                    }}
                    GooglePlacesDetailsQuery={{
                        fields: ['formated_address', 'geometry']
                    }}
                    filterReverseGeocodingByTypes={[
                        'locality',
                        'administrative_area_level_3',
                    ]} // filter the reverse geocoding results by types - ['locality', 'administrative_area_level_3'] if you want to display only cities
                    // predefinedPlaces={[homePlace, workPlace]}
                    enablePoweredByContainer={false}
                    debounce={200}
                />